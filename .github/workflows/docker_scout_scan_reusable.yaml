# .github/workflows/docker_scout_scan_reusable.yaml
name: Docker Scout Scan Reusable

on:
  workflow_call:
    inputs:
      image_to_scan:
        description: "The Docker image to scan (e.g., 'nginx:latest')"
        required: true
        type: string
      scan_type:
        description: "Type of Docker Scout scan ('cves', 'quickview', 'sbom')"
        default: "cves"
        required: false
        type: string
      upload_sarif:
        description: "Upload SARIF report to GitHub Security tab (only for 'cves' scan_type)"
        default: false
        required: false
        type: boolean
    outputs:
      scan_status:
        # Asegúrate que este output esté definido en el job 'scan'.
        # La referencia directa a jobs.scan.outputs.scan_status es correcta.
        value: ${{ jobs.scan.outputs.scan_status }}

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    outputs:
      scan_status: ${{ steps.scout_scan.outputs.scan_result }} # Define el output aquí

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (includes Docker Scout)
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (Optional: if you push this image or pull private bases)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run Docker Scout Scan (${{ inputs.scan_type }})
        id: scout_scan
        run: |
          REPORT_FILE=""
          echo "Running docker scout ${{ inputs.scan_type }} for image: ${{ inputs.image_to_scan }}"
          case "${{ inputs.scan_type }}" in
            cves)
              # Eliminar --exit-code, no es un flag válido. '|| true' para evitar fallos.
              docker scout cves ${{ inputs.image_to_scan }} --format sarif > "scout-report-cves.sarif" || true
              REPORT_FILE="scout-report-cves.sarif"
              ;;
            quickview)
              docker scout quickview ${{ inputs.image_to_scan }} --format json > scout-quickview.json
              echo "Docker Scout Quickview report generated as scout-quickview.json"
              REPORT_FILE="scout-quickview.json"
              ;;
            sbom)
              docker scout sbom ${{ inputs.image_to_scan }} --format json > scout-sbom.json
              echo "Docker Scout SBOM report generated as scout-sbom.json"
              REPORT_FILE="scout-sbom.json"
              ;;
            *)
              echo "Unsupported scan_type: ${{ inputs.scan_type }}"
              echo "scan_result=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac
          echo "SCANTYPE_REPORT_FILE=${REPORT_FILE}" >> $GITHUB_OUTPUT
          echo "scan_result=success" >> $GITHUB_OUTPUT

      - name: Upload Docker Scout SARIF report to GitHub Security tab
        if: ${{ inputs.upload_sarif == true && steps.scout_scan.outputs.SCANTYPE_REPORT_FILE != '' && steps.scout_scan.outputs.SCANTYPE_REPORT_FILE == 'scout-report-cves.sarif' && success() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scout_scan.outputs.SCANTYPE_REPORT_FILE }}
          category: 'docker-scout-cves'

      - name: Upload Docker Scout Report as Artifact (for other scan types)
        if: ${{ steps.scout_scan.outputs.SCANTYPE_REPORT_FILE != '' && steps.scout_scan.outputs.SCANTYPE_REPORT_FILE != 'scout-report-cves.sarif' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.scan_type }}-report
          path: ${{ steps.scout_scan.outputs.SCANTYPE_REPORT_FILE }}