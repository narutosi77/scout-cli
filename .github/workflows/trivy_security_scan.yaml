# .github/workflows/trivy_security_scan.yaml
name: CI/CD Pipeline for Scout-CLI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # TRABAJO 1: Ejecutar pruebas unitarias
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Run Go unit tests
        run: go test -v ./...

  # TRABAJO 2: Escanear el c贸digo en busca de vulnerabilidades
  security-scan:
    name: Trivy Filesystem Scan
    needs: unit-tests # Se ejecuta solo si las pruebas pasan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'filesystem-trivy'

  # ------ NUEVO TRABAJO 3: PUBLICAR LA IMAGEN DOCKER ------
  publish-image:
    name: Build and Publish Docker Image
    # Se ejecuta solo si las pruebas y el escaneo de seguridad pasan
    needs: [unit-tests, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permiso para escribir en el GitHub Container Registry

    steps:
      # 1. Descarga el c贸digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Inicia sesi贸n en el GitHub Container Registry (GHCR)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Tu nombre de usuario de GitHub
          password: ${{ secrets.GHCR_PAT }} # El token que guardamos como secreto

      # 3. Extrae metadatos (como etiquetas) para la imagen
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Nombre de la imagen: ghcr.io/narutosi77/scout-cli

      # 4. Construye la imagen y la sube al registro (GHCR)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Le dice a la acci贸n que suba la imagen
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}