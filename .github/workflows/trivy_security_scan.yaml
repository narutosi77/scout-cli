# .github/workflows/trivy_security_scan.yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ------ NUEVO TRABAJO: PRUEBAS UNITARIAS ------
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      # 1. Descarga el código del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura el entorno de Go en la máquina virtual
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Puedes ajustar esta versión a la de tu proyecto

      # 3. Ejecuta las pruebas unitarias
      - name: Run Go unit tests
        run: go test -v ./... # El ./... ejecuta las pruebas en todos los directorios

  # ------ TRABAJO EXISTENTE: ESCANEO DE SEGURIDAD ------
  # Este trabajo ahora depende del éxito de las pruebas unitarias
  security-scan:
    name: Trivy Filesystem Scan
    # 'needs' asegura que este trabajo SOLO se ejecute si 'unit-tests' fue exitoso
    needs: unit-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'filesystem-trivy'