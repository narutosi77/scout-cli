# .github/workflows/trivy_security_scan.yaml
name: Trivy Security Scan (Public Image Test)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite ejecución manual

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Necesario para checkout
      security-events: write # Necesario para subir resultados SARIF a la pestaña de seguridad de GitHub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (includes Docker Scout)
        # Este paso instalará Docker y Docker Scout CLI, eliminando la necesidad de curl manual.
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        # Este paso es opcional si solo escaneas imágenes públicas o no necesitas pull/push.
        # Lo mantengo por si lo necesitas para otras fases de tu proyecto.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build My CLI/Plugin Image for Scan
        # Asume que tu Dockerfile principal está en la raíz del repositorio.
        # Si tu Dockerfile está en 'plugin/Dockerfile', ajusta el comando a:
        # run: docker build -t my-cli-image:latest -f plugin/Dockerfile plugin/
        # Para tu caso, donde parece haber un Dockerfile en la raíz, se mantiene el .
        run: docker build -t my-cli-image:latest -f Dockerfile .

      - name: Run Trivy vulnerability scan on Public Image
        id: trivy_scan
        uses: aquasecurity/trivy-action@master
        with:
          # 'image-ref' es el parámetro correcto para la acción trivy-action.
          image-ref: 'my-cli-image:latest' # Escanea la imagen que acabas de construir.
          format: 'sarif'
          output: 'trivy-report.sarif'
          # exit-code: '1' # Descomenta si quieres que el workflow falle en caso de vulnerabilidades críticas/altas
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        # Esta condición asegura que el archivo SARIF exista y el paso anterior haya sido exitoso.
        # 'success()' garantiza que no se intente subir un archivo inexistente.
        if: ${{ success() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-report.sarif'
          category: 'trivy-security-scan'

      - name: Upload Trivy report artifact
        # Este paso es útil para depuración, ya que guarda el reporte SARIF como un artefacto del workflow.
        if: always() # Siempre sube el artefacto, incluso si el escaneo falla.
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif